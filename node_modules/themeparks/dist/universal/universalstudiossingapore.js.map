{"version":3,"sources":["../../lib/universal/universalstudiossingapore.js"],"names":["Park","require","GeoLocation","cheerio","Moment","s_APIBase","Symbol","s_APILanguage","s_parkLocationMin","s_parkLocationMax","s_parkScheduleURL","UniversalStudiosSingapore","options","name","latitude","longitude","timezone","api_base","api_langauge","schedule_url","Promise","resolve","reject","randomGeoLocation","RandomBetween","Log","HTTP","url","body","LatitudeRaw","LongitudeRaw","then","ResponseOfUSS","Result","USSZoneList","USSZone","forEach","zone","rides","Content","USSContent","rideIDX","ride","rideObject","GetRideObject","id","USSContentID","Name","WaitTime","Availability","parseInt","QueueTime","ParseOpeningHoursHTML","bind","results","dateIdx","date","Schedule","SetDate","OpeningHour","openingTime","closingTime","ClosingHour","HTML","$","load","tables","tableIdx","table","month","find","text","isValid","dates","i","dateString","dateVal","dateHours","last","trim","replace","match","exec","tz","Timezone","push","module","exports"],"mappings":"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","file":"universalstudiossingapore.js","sourcesContent":["// include core Park class\nconst Park = require(\"../park\");\n\nconst GeoLocation = require(\"../geoLocation\");\n\nconst cheerio = require(\"cheerio\");\nconst Moment = require(\"moment-timezone\");\n\nconst s_APIBase = Symbol();\nconst s_APILanguage = Symbol();\nconst s_parkLocationMin = Symbol();\nconst s_parkLocationMax = Symbol();\nconst s_parkScheduleURL = Symbol();\n\n/**\n * Implements the Universal Singapore API.\n * @class\n * @extends Park\n */\nclass UniversalStudiosSingapore extends Park {\n    /**\n     * Create new UniversalStudiosSingapore Object.\n     * @param {Object} options\n     * @param {String} [options.api_base] API URL base for accessing API\n     * @param {String} [options.api_langauge] Language ID for API results (default: 1)\n     */\n    constructor(options = {}) {\n        options.name = options.name || \"Universal Studios Singapore\";\n\n        // set park's location as it's entrance\n        options.latitude = options.latitude || 1.254251;\n        options.longitude = options.longitude || 103.823797;\n\n        options.timezone = \"Asia/Singapore\";\n\n        // inherit from base class\n        super(options);\n\n        this[s_APIBase] = options.api_base || \"http://cma.rwsentosa.com/Service.svc/GetUSSContent\";\n        this[s_APILanguage] = options.api_langauge || 1;\n        this[s_parkScheduleURL] = options.schedule_url || \"http://www.rwsentosa.com/Homepage/Attractions/UniversalStudiosSingapore\";\n\n        // Geofence corners (to generate random location for API requests)\n        this[s_parkLocationMin] = new GeoLocation({\n            latitude: 1.2547872658731591,\n            longitude: 103.8217341899872\n        });\n        this[s_parkLocationMax] = new GeoLocation({\n            latitude: 1.2533177673892697,\n            longitude: 103.82408380508424\n        });\n    }\n\n    /**\n     * Fetch Universal Singapore's waiting times\n     * @returns {Promise}\n     */\n    FetchWaitTimes() {\n        return new Promise((resolve, reject) => {\n            // generate random geo location to fetch with\n            const randomGeoLocation = GeoLocation.RandomBetween(this[s_parkLocationMin], this[s_parkLocationMax]);\n\n            this.Log(\"Running Universal Studios Singapore\");\n            this.HTTP({\n                url: this[s_APIBase],\n                body: {\n                    \"languageID\": this[s_APILanguage],\n                    \"filter\": \"Ride\",\n                    \"Latitude\": randomGeoLocation.LatitudeRaw,\n                    \"Longitude\": randomGeoLocation.LongitudeRaw\n                },\n            }).then((body) => {\n                // check the response is as we expect\n                if (!body || !body.ResponseOfUSS || !body.ResponseOfUSS.Result || !body.ResponseOfUSS.Result.USSZoneList || !body.ResponseOfUSS.Result.USSZoneList.USSZone) {\n                    this.Log(`Error parsing Universal Studios Singapore response: ${body}`);\n                    return reject(\"Unable to parse Universal Studios Singapore wait times response\");\n                }\n\n                // loop through each zone\n                body.ResponseOfUSS.Result.USSZoneList.USSZone.forEach((zone) => {\n                    var rides = zone.Content.USSContent;\n\n                    // loop through each ride\n                    for (var rideIDX = 0, ride; ride = rides[rideIDX++];) {\n                        var rideObject = this.GetRideObject({\n                            id: ride.USSContentID,\n                            name: ride.Name\n                        });\n\n                        rideObject.WaitTime = (ride.Availability && ride.Availability == \"True\") ? parseInt(ride.QueueTime, 10) || -1 : -1;\n                    }\n                });\n\n                return resolve();\n            }, reject);\n        });\n    }\n\n    FetchOpeningTimes() {\n        // Get HTML page of park\n        return this.HTTP({\n            url: this[s_parkScheduleURL]\n        }).then(this.ParseOpeningHoursHTML.bind(this)).then((results) => { // parse results\n            for (var dateIdx = 0, date; date = results[dateIdx++];) {\n                // record results\n                this.Schedule.SetDate({\n                    date: date.OpeningHour,\n                    openingTime: date.OpeningHour,\n                    closingTime: date.ClosingHour\n                });\n            }\n            return Promise.resolve();\n        });\n    }\n\n    ParseOpeningHoursHTML(HTML) {\n        var $ = cheerio.load(HTML);\n\n        var results = [];\n\n        // grab all the styled tables (a potential calendar)\n        var tables = $(\"table.styled\");\n        for (var tableIdx = 0, table; table = tables[tableIdx++];) {\n            table = $(table);\n            // check we found a calendar month (otherwise it's some other table on this page)\n            const month = table.find(\".tableTitle\").text();\n            // validate using Moment\n            if (Moment(month, \"MMMM YYYY\").isValid()) {\n                // find each table cell\n                const dates = table.find(\"td\");\n                for (var i = 0, date; date = dates[i++];) {\n                    date = $(date);\n                    // check it has a valid date (and not an empty cell!)\n                    const dateString = date.find(\"strong\").text();\n                    const dateVal = parseInt(dateString, 10);\n                    if (dateVal > 0) {\n                        // slim down hours to remove all whitespace\n                        //  leave in newlines, so we can ignore the special parades/hours\n                        const dateHours = date.find(\"span\").last().text().trim().replace(/[^\\S\\n]/g, \"\");\n\n                        // look for valid times\n                        var match = /([0-9]+[AP]M)-([0-9]+[AP]M)/.exec(dateHours);\n                        if (match && match[1] && match[2]) {\n                            const OpeningHour = Moment.tz(`${dateVal} ${month} ${match[1]}`, \"D MMMM YYYY HA\", this.Timezone);\n                            const ClosingHour = Moment.tz(`${dateVal} ${month} ${match[2]}`, \"D MMMM YYYY HA\", this.Timezone);\n\n                            results.push({\n                                OpeningHour,\n                                ClosingHour\n                            });\n                        }\n                    }\n                }\n            }\n        }\n\n        return Promise.resolve(results);\n    }\n}\n\n// export the class\nmodule.exports = UniversalStudiosSingapore;"]}