{"version":3,"sources":["../../lib/cedarfair/index.js"],"names":["SeaWorld","require","Moment","relaxedJson","s_specialHours","Symbol","CedarFairPark","options","name","auth_token","api_base","ride_types","special_hours","concat","Cache","Wrap","Promise","resolve","reject","GetAPIUrl","url","APIBase","ParkID","then","productData","i","product","id","purchaseLink","indexOf","replace","venueData","details","j","detail","description","bind","FindScheduleDataURL","scheduleURL","HTTP","data","toString","JSONData","parse","e","Name","FetchStaticScheduleData","scheduleData","main","mainParkHours","ParseOpeningLegend","legend","month","day","dayRow","today","monthIdx","months","hoursIdx","hours","dayIdx","class","tz","index","year","Timezone","Schedule","SetDate","date","openingTime","clone","set","get","closingTime","type","specialHourIdx","specialHours","specialLegend","specialMonthIdx","specialHoursIdx","specialDayIdx","regex_legendTimes","legendData","schedule","legendIdxA","legendA","legendIdxB","times","exec","toUpperCase","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\n\n// woah WAT? We're based on the SeaWorld API?\n//  yep, SeaWorld and Cedar Fair use the same backend API framework for their park wait times\n//  I didn't realise this for a long time, until I checked Knott's Berry Farm and noticed the similarities\n//  So, to save reimplementing it from scratch, I am going to just override a few bits from the SeaWorld implementation\nvar SeaWorld = require(\"../seaworld/\");\nvar Moment = require(\"moment-timezone\");\n\n// a lenient JSON parser\nvar relaxedJson = require(\"relaxed-json\");\n\n// cedar parks have special hours under unique categories\n//  example: scary farm is listed as a separate park_id\n// so we need to list these here so we can combine them into our schedule data as \"special hours\"\nvar s_specialHours = Symbol();\n\n/**\n * Implements the CedarFairPark API framework.\n * @class\n * @extends SeaWorld\n */\nclass CedarFairPark extends SeaWorld {\n    /**\n     * Create new CedarFairPark Object.\n     * This object should not be called directly, but rather extended for each of the individual Cedar Fair parks\n     * @param {Object} options\n     * @param {String} options.park_id ID of the park to access the API for\n     * @param {String} [options.auth_token] Auth token to use to connect to the API\n     * @param {String} [options.api_base] Base URL to access the API\n     * @param {String[]} [options.ride_types] Array of types that denote rides at the park (to avoid listing restaurants/toilets etc. as rides)\n     * @param {String[]} [options.special_hours] Array of park IDs to combine with main park for special hours (eg. scaryfarm)\n     */\n    constructor(options = {}) {\n        options.name = options.name || \"Cedar Fair Park\";\n\n        // change defaults before calling super()\n        options.auth_token = options.auth_token || \"Mobile_API:merl4yU2\";\n        options.api_base = options.api_base || \"https://cf.te2.biz/rest/\";\n\n        // Cedar Fair parks use these three categories for rides\n        options.ride_types = options.ride_types || [\"Family\", \"ThrillRides\", \"Kids\"];\n\n        // inherit from base class\n        super(options);\n\n        // optional special hour parks\n        this[s_specialHours] = options.special_hours || [];\n        // make sure we're an array\n        this[s_specialHours] = [].concat(this[s_specialHours]);\n    }\n\n    // sadly, the Cedar Fair API doesn't have park hours (it just returns an empty array)\n    //  so, let's override it from SeaWorld\n    FindScheduleDataURL() {\n        return this.Cache.Wrap(\"schedule_url\", function() {\n            return new Promise(function(resolve, reject) {\n                this.GetAPIUrl({\n                    // the park hours URL is kept in the products area\n                    url: `${this.APIBase}commerce/${this.ParkID}/products/all`\n                }).then(function(productData) {\n                    // got product data, we're looking for GUEST_PARK_HOURS to get our schedule URL\n                    for (var i = 0, product; product = productData[i++];) {\n                        if (product.id == \"GUEST_PARK_HOURS\") {\n                            // this will give us the park-hours.htm document\n                            //  we want the schedule.js script that contains all the hours data\n\n                            // check we're still getting the expected park-hours.htm document\n                            if (product.purchaseLink.indexOf(\"park-hours\") < 0) {\n                                return reject(\"Park hours URL has changed, requires themeparks library update\");\n                            }\n\n                            return resolve(product.purchaseLink.replace(/park-hours[a-zA-Z0-9_-]*\\.htm/, \"\") + \"js/schedule.js\");\n                        }\n                    }\n\n                    // failed? search the main venue data instead\n                    this.GetAPIUrl({\n                        url: `${this.APIBase}venue/${this.ParkID}`\n                    }).then((venueData) => {\n                        // search venue data\n                        if (venueData.details) {\n                            for (var j = 0, detail; detail = venueData.details[j++];) {\n                                if (detail.id == \"info_web_hours_directions\") {\n                                    if (detail.description.indexOf(\"park-hours\") < 0) {\n                                        return reject(\"Park hours URL has changed, requires themeparks library update\");\n                                    }\n\n                                    return resolve(detail.description.replace(/park-hours[a-zA-Z0-9_-]*\\.htm/, \"\") + \"js/schedule.js\");\n                                }\n                            }\n                        }\n\n                        return reject(\"Unable to discover park hours URL\");\n                    });\n                }.bind(this), reject);\n            }.bind(this));\n        }.bind(this), 60 * 60 * 24); // cache URL for 24 hours\n    }\n\n    FetchStaticScheduleData() {\n        return this.Cache.Wrap(\"schedule_data\", function() {\n            return new Promise(function(resolve, reject) {\n                this.FindScheduleDataURL().then(function(scheduleURL) {\n                    // notice we don't use the API here, this is hosted outside the API, so do a normal API request\n                    this.HTTP({\n                        url: scheduleURL\n                    }).then(function(data) {\n                        data = data.toString();\n                        // strip out data around the key JSON object\n                        //  this isn't pretty, but avoids having to manually embed this data into the library, which would be worse\n\n                        // remove js var init\n                        data = data.replace(/var\\s+schedule\\s*=\\s*/, \"\");\n\n                        // remove semi-colon\n                        data = data.replace(/;/g, \"\");\n\n                        // remove leading non-{ characters\n                        data = data.replace(/^[^{]+/, \"\");\n\n                        // remove any extra variables after initial one\n                        data = data.replace(/var[\\S\\s]*$/mg, \"\");\n\n                        // use our lenient JSON parser\n                        try {\n                            var JSONData = relaxedJson.parse(data);\n                        } catch (e) {\n                            return reject(`Failed to parse response data from ${this.Name} API: ${e}`);\n                        }\n\n                        if (JSONData) resolve(JSONData);\n                    }.bind(this), reject);\n                }.bind(this), reject);\n            }.bind(this));\n        }.bind(this), 60 * 60 * 24); // cache for 24 hours\n    }\n\n    FetchOpeningTimes() {\n        return new Promise(function(resolve, reject) {\n            // get our schedule data\n            this.FetchStaticScheduleData().then(function(scheduleData) {\n                if (!scheduleData || !scheduleData.main) {\n                    return reject(\"Unable to find main schedule data for park\");\n                }\n\n                // parse park legend to figure out possible opening hours\n                var mainParkHours = ParseOpeningLegend(scheduleData.main.legend);\n\n                var month, day, dayRow, today;\n\n                // cycle through main park hours\n                for (var monthIdx = 0; month = scheduleData.main.months[monthIdx++];) {\n                    for (var hoursIdx = 0; dayRow = month.hours[hoursIdx++];) {\n                        for (var dayIdx = 0; day = dayRow[dayIdx++];) {\n                            // skip this entry if there is no day set\n                            if (!day.day) continue;\n                            // skip this entry if the class doesn't appear in the legend\n                            if (!mainParkHours[day.class]) continue;\n\n                            // figure out this day in the local timezone\n                            today = Moment.tz({\n                                day: day.day,\n                                month: month.index,\n                                year: month.year\n                            }, this.Timezone);\n\n                            this.Schedule.SetDate({\n                                date: today,\n                                // clone today and overwrite the hours from the park legend\n                                openingTime: today.clone().set(\"hours\", mainParkHours[day.class].openingTime.get(\"hours\")).set(\"minutes\", mainParkHours[day.class].openingTime.get(\"minutes\")),\n                                closingTime: today.clone().set(\"hours\", mainParkHours[day.class].closingTime.get(\"hours\")).set(\"minutes\", mainParkHours[day.class].closingTime.get(\"minutes\")),\n                                type: \"Operating\"\n                            });\n                        }\n                    }\n                }\n\n                // if we have special hours, inject these into main hours\n                for (var specialHourIdx = 0, specialHours; specialHours = this[s_specialHours][specialHourIdx++];) {\n                    if (!scheduleData[specialHours]) continue;\n\n                    var specialLegend = ParseOpeningLegend(scheduleData[specialHours].legend);\n\n                    for (var specialMonthIdx = 0; month = scheduleData[specialHours].months[specialMonthIdx++];) {\n                        for (var specialHoursIdx = 0; dayRow = month.hours[specialHoursIdx++];) {\n                            for (var specialDayIdx = 0; day = dayRow[specialDayIdx++];) {\n                                // skip this entry if there is no day set\n                                if (!day.day) continue;\n                                // skip this entry if the class doesn't appear in the legend\n                                if (!specialLegend[day.class]) continue;\n\n                                // figure out this day in the local timezone\n                                today = Moment.tz({\n                                    day: day.day,\n                                    month: month.index,\n                                    year: month.year\n                                }, this.Timezone);\n\n                                this.Schedule.SetDate({\n                                    date: today,\n                                    // clone today and overwrite the hours from the park legend\n                                    openingTime: today.clone().set(\"hours\", specialLegend[day.class].openingTime.get(\"hours\")).set(\"minutes\", specialLegend[day.class].openingTime.get(\"minutes\")),\n                                    closingTime: today.clone().set(\"hours\", specialLegend[day.class].closingTime.get(\"hours\")).set(\"minutes\", specialLegend[day.class].closingTime.get(\"minutes\")),\n                                    type: specialHours,\n                                    specialHours: true\n                                });\n                            }\n                        }\n                    }\n                }\n\n                resolve();\n            }.bind(this), reject);\n        }.bind(this));\n    }\n}\n\n// move this outside the class as it's just a convenience class and doens't need to be exposed\nvar regex_legendTimes = /([0-9]+(?::[0-9]+)?[ap]m)\\s*-\\s*([0-9]+(?::[0-9]+)?[ap]m)/i;\n\nfunction ParseOpeningLegend(legendData) {\n    var schedule = {};\n\n    // legends are inside two loops. Not totally sure why, but might be a lazy formatting choice for the HTML result\n    for (var legendIdxA = 0, legendA; legendA = legendData[legendIdxA++];) {\n        for (var legendIdxB = 0, legend; legend = legendA[legendIdxB++];) {\n            // try to parse times out of description\n            var times = regex_legendTimes.exec(legend.description);\n            if (times && times[1] && times[2]) {\n                schedule[legend.class] = {\n                    openingTime: Moment(`${times[1].toUpperCase()}`, \"H:mA\"),\n                    closingTime: Moment(`${times[2].toUpperCase()}`, \"H:mA\"),\n                };\n            }\n        }\n    }\n\n    return schedule;\n}\n\nmodule.exports = CedarFairPark;"]}