{"version":3,"sources":["../../lib/asterixpark/index.js"],"names":["Park","require","Moment","rawRideData","__dirname","rideData","i","ride","code","s_apiBase","Symbol","s_apiVersion","s_appVersion","reTime","reClosingTime","AsterixPark","options","name","timezone","latitude","longitude","api_base","api_version","app_version","Promise","resolve","reject","HTTP","url","data","then","waittimes","GetOpeningTimes","parkTimes","allRidesClosed","todaysOpeningHour","now","parkTime","type","isBetween","openingTime","closingTime","latency","ridetime","rideObject","GetRideObject","id","attractionid","title","WaitTime","waitTime","parseInt","closing_time","resultRe","exec","closingMoment","tz","Timezone","hours","minutes","seconds","Schedule","SetDate","bind","openingHours","agenda","date","jour","firstResult","horaire","clone","endOf","specialHours","Log","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["// include core Park class\nvar Park = require(\"../park\");\n\nvar Moment = require(\"moment-timezone\");\n\n// load ride name data\nvar rawRideData = require(__dirname + \"/AsterixData.js\");\nvar rideData = {};\nfor (var i = 0, ride; ride = rawRideData[i++];) {\n    rideData[ride.code] = ride;\n}\n\nvar s_apiBase = Symbol();\nvar s_apiVersion = Symbol();\nvar s_appVersion = Symbol();\n\nvar reTime = /(\\d+)h - (\\d+|Minuit)(?:h?)/ig;\nvar reClosingTime = /(\\d+)h(\\d+)/;\n\n/**\n * Implements the Asterix Park API\n * @class\n * @extends Park\n */\nclass AsterixPark extends Park {\n    constructor(options = {}) {\n        options.name = options.name || \"Parc-Asterix\";\n        options.timezone = options.timezone || \"Europe/Paris\";\n        options.latitude = options.latitude || 49.136041;\n        options.longitude = options.longitude || 2.572768;\n\n        // inherit from base class\n        super(options);\n\n        // API Options\n        this[s_apiBase] = options.api_base || \"https://www.parcasterix.fr/webservices/\";\n        this[s_apiVersion] = options.api_version || \"1\";\n        this[s_appVersion] = options.app_version || \"320\";\n    }\n\n    // this park supports ride schedules\n    get SupportsRideSchedules() {\n        return true;\n    }\n\n    FetchWaitTimes() {\n        return new Promise(function(resolve, reject) {\n            this.HTTP({\n                url: `${this[s_apiBase]}api/attentix.json`,\n                data: {\n                    \"device\": \"android\",\n                    \"version\": this[s_appVersion],\n                    \"lang\": \"fr\",\n                    \"apiversion\": this[s_apiVersion]\n                }\n            }).then(function(waittimes) {\n                // get opening hours and mark every ride as closed if the park is just actually closed\n                this.GetOpeningTimes().then(function(parkTimes) {\n                    var allRidesClosed = true;\n                    var todaysOpeningHour;\n\n                    var now = Moment();\n                    for (var i = 0, parkTime; parkTime = parkTimes[i++];) {\n                        if (parkTime.type == \"Operating\" && now.isBetween(parkTime.openingTime, parkTime.closingTime)) {\n                            allRidesClosed = false;\n                            // remember the park's opening hour so we can fill in ride opening times later\n                            todaysOpeningHour = parkTime.openingTime;\n                        }\n                    }\n\n                    if (!waittimes.latency || !waittimes.latency.latency) return reject(\"API didn't return expected format\");\n\n                    var ridetime;\n                    for (i = 0, ridetime; ridetime = waittimes.latency.latency[i++];) {\n                        var rideObject = this.GetRideObject({\n                            id: ridetime.attractionid,\n                            // ride name comes from hard-coded AsterixData.json file\n                            name: (rideData[ridetime.attractionid] && rideData[ridetime.attractionid].title) ? rideData[ridetime.attractionid].title : \"??\",\n                        });\n\n                        // if park is closed, just mark all rides as closed\n                        if (allRidesClosed) {\n                            rideObject = -1;\n                        } else {\n                            //FYI, latency = \"A L'ARRET\" / \"INDISPONIBLE\" / \"FERME\" / \"X\" (mn)\n                            if (ridetime.latency === \"A L'ARRET\" || ridetime.latency === \"INDISPONIBLE\") {\n                                rideObject.WaitTime = -2;\n                            } else if (ridetime.latency === \"FERME\") {\n                                rideObject.WaitTime = -1;\n                            } else {\n                                rideObject.waitTime = parseInt(ridetime.latency, 10);\n\n                                if (ridetime.closing_time) {\n                                    var resultRe = reClosingTime.exec(ridetime.closing_time);\n                                    if (resultRe) {\n                                        var closingMoment = Moment.tz(this.Timezone).hours(parseInt(resultRe[1])).minutes(parseInt(resultRe[2])).seconds(0);\n                                        rideObject.Schedule.SetDate({\n                                            openingTime: todaysOpeningHour,\n                                            closingTime: closingMoment,\n                                            type: \"Operating\"\n                                        });\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    resolve();\n                }.bind(this), reject);\n            }.bind(this), reject);\n        }.bind(this));\n    }\n\n    FetchOpeningTimes() {\n        return new Promise(function(resolve, reject) {\n            this.HTTP({\n                url: `${this[s_apiBase]}03/fr`,\n                data: {\n                    \"device\": \"android\",\n                    \"version\": this[s_appVersion],\n                    \"lang\": \"fr\",\n                    \"apiversion\": this[s_apiVersion]\n                }\n            }).then(function(openingHours) {\n                if (!openingHours.agenda) return reject(\"API didn't return expected opening hours data\");\n\n                for (var i = 0, agenda; agenda = openingHours.agenda[i++];) {\n                    var date = Moment.tz(agenda.jour, \"DD-MM-YYYY\", this.Timezone);\n\n                    if (agenda.type === \"D\") {\n                        // park is closed\n                        this.Schedule.SetDate({\n                            date: date,\n                            type: \"Closed\"\n                        });\n                    } else if (agenda.type === \"A\") {\n                        var resultRe;\n                        var firstResult = true;\n\n                        while ((resultRe = reTime.exec(agenda.horaire)) !== null) {\n                            // - Normal time\n                            this.Schedule.SetDate({\n                                date: date,\n                                openingTime: date.clone().hours(parseInt(resultRe[1])).minutes(0).seconds(0),\n                                closingTime: (resultRe[2] === \"Minuit\") ? date.endOf(\"day\") : date.clone().hours(parseInt(resultRe[2])).minutes(0).seconds(0),\n                                // can't send type for \"special hours\"\n                                type: !firstResult ? null : \"Operating\",\n                                // first result is normal hours, any further dates are special hours\n                                specialHours: !firstResult\n                            });\n\n                            // mark that we've parsed one set of opening hours, assume any others are special\n                            firstResult = false;\n                        }\n                    } else {\n                        this.Log(`Unknown agenda type: ${agenda.type}`);\n                        continue;\n                    }\n                }\n\n                resolve();\n            }.bind(this), reject);\n        }.bind(this));\n    }\n}\n\n// export the class\nmodule.exports = AsterixPark;"]}