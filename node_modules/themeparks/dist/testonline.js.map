{"version":3,"sources":["../lib/testonline.js"],"names":["assert","require","parks","Parks","moment","PRINTDATA","process","env","TestPark","park","describe","timeout","times","it","done","GetWaitTimes","err","_times","console","log","JSON","stringify","name","length","i","ride","ValidateType","fastPass","FastPass","status","active","schedule","GetOpeningTimes","_schedule","day","ValidateDateTime","type","obj","key","date","isValid","types","concat","objectType","t","fail","Run","PARKID","park_id"],"mappings":"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","file":"testonline.js","sourcesContent":["var assert = require(\"assert\");\nvar parks = require(\"./index\").Parks;\nvar moment = require(\"moment-timezone\");\n\n// define Mocha functions for eslint\n/*global describe it*/\n\n// allow console for unit tests\n/* eslint-disable no-console */\n\n// optional environment variable to print out API results\nvar PRINTDATA = process.env.PRINTDATA ? true : false;\n\nfunction TestPark(park) {\n    // === Test Wait Times Fetching ===\n    describe(\"Get Park Wait Times\", function() {\n        // give each test 2 minutes to finish\n        this.timeout(1000 * 60 * 2);\n\n        var times = [];\n\n        it(\"should not return an error fetching ride times\", function(done) {\n            park.GetWaitTimes(function(err, _times) {\n                times = _times;\n                if (PRINTDATA) console.log(JSON.stringify(times, null, 2));\n                assert(!err);\n                done(err);\n            });\n        });\n\n        it(\"should have some ride data\", function() {\n            assert(times);\n\n            // Sesame Place doesn't return data in downtime, so sorry. This is a bad unit test.\n            if (park.name == \"Sesame Place\") return;\n\n            assert(times.length > 3, \"Not enough ride times to be valid data (<= 3), actual: \" + times.length);\n        });\n\n        it(\"should have an ID for every ride\", function() {\n            for (var i = 0, ride; ride = times[i++];) ValidateType(ride, \"id\", [\"string\", \"number\"]);\n        });\n\n        it(\"should have a wait time for every ride\", function() {\n            for (var i = 0, ride; ride = times[i++];) ValidateType(ride, \"waitTime\", \"number\");\n        });\n\n        it(\"should have a name for every ride\", function() {\n            for (var i = 0, ride; ride = times[i++];) ValidateType(ride, \"name\", \"string\");\n        });\n\n        it(\"should have an active state for every ride\", function() {\n            for (var i = 0, ride; ride = times[i++];) ValidateType(ride, \"active\", \"boolean\");\n        });\n\n        it(\"should have a fastpass field for every ride\", function() {\n            for (var i = 0, ride; ride = times[i++];) {\n                ValidateType(ride, \"fastPass\", \"boolean\");\n\n                // if any ride claims to have FastPass, so should the park\n                if (ride.fastPass) {\n                    assert(park.FastPass, \"If any ride has fastPass available, the park should also support FastPass\");\n                }\n            }\n        });\n\n        it(\"should have a status field for every ride\", function() {\n            for (var i = 0, ride; ride = times[i++];) {\n                ValidateType(ride, \"status\", \"string\");\n                // status string should only ever be one of these three options\n                assert(\n                    ride.status == \"Operating\" || ride.status == \"Refurbishment\" || ride.status == \"Closed\" || ride.status == \"Down\",\n                    \"Invalid status string returned by \" + ride.name + \": \" + ride.status\n                );\n            }\n        });\n\n        it(\"should have matching status and active fields\", function() {\n            for (var i = 0, ride; ride = times[i++];) {\n                // check status and active variables match up\n                if (ride.status == \"Operating\") assert(ride.active, \"Ride cannot have Operating status and be inactive\");\n                else assert(!ride.active, \"Ride can't be active without Operating status\");\n            }\n        });\n    });\n\n    // === Test Schedule Fetching ===\n    describe(\"Get Schedule\", function() {\n        // give each test 2 minutes to finish\n        this.timeout(1000 * 60 * 2);\n\n        var schedule = [];\n        it(\"should not error when fetching schedule\", function(done) {\n            park.GetOpeningTimes(function(err, _schedule) {\n                assert(!err, \"GetOpeningTimes returned an error: \" + err);\n\n                schedule = _schedule;\n\n                if (PRINTDATA) console.log(JSON.stringify(schedule, null, 2));\n\n                done(err);\n            });\n        });\n\n        it(\"should have schedule data\", function() {\n            assert(schedule);\n            assert(schedule.length > 3, \"Should be at least 4 schedule items. Found \" + schedule.length);\n        });\n\n        it(\"should have a valid date for each schedule entry\", function() {\n            for (var i = 0, day; day = schedule[i++];) ValidateDateTime(day, \"date\");\n        });\n\n        // skip if this day is closed\n        it(\"should have a valid opening time for each schedule entry\", function() {\n            for (var i = 0, day; day = schedule[i++];) {\n                if (day.type && day.type == \"Closed\") continue;\n                ValidateDateTime(day, \"openingTime\");\n            }\n        });\n\n        it(\"should have a valid closing time for each schedule entry\", function() {\n            for (var i = 0, day; day = schedule[i++];) {\n                if (day.type && day.type == \"Closed\") continue;\n                ValidateDateTime(day, \"closingTime\");\n            }\n        });\n\n        // TODO - test the \"special hours\" array has valid data too\n    });\n}\n\nfunction ValidateDateTime(obj, key) {\n    assert(obj, \"Date parent is not a valid object\");\n    assert(obj[key], \"Date field \" + key + \" is not a valid object\");\n\n    // parse date using momentjs\n    var date = moment(obj[key]);\n    //var yesterday = moment().subtract(1, \"day\");\n    // make sure date is valid\n    assert(date.isValid(), \"Date \" + obj[key] + \" is invalid\");\n    // dates returned should be from today onwards\n    // TODO - fix this logic, timezones mean that some parks will genuinely be open \"yesterday\"\n    //assert(date.isAfter(yesterday), \"Date \" + obj[key] + \" is before today (<= \" + yesterday.format() + \")\");\n}\n\nfunction ValidateType(obj, key, types) {\n    // force types to an array\n    types = [].concat(types);\n\n    assert(obj, \"Object passed to type validator is not valid\");\n\n    var objectType = typeof(obj[key]);\n    for (var i = 0, t; t = types[i++];) {\n        // exit function if we find a required type\n        if (objectType == t) return;\n    }\n\n    console.log(obj);\n\n    assert.fail(\"Object \" + obj[key] + \" is not of any required types: \" + JSON.stringify(types) + \" (got \" + objectType + \")\");\n}\n\nfunction Run() {\n    if (process.env.PARKID) {\n        var park_id = process.env.PARKID;\n        if (parks[park_id]) {\n            // run tests against a single park\n            describe(\"Park \" + parks[park_id].name, function() {\n                TestPark(new parks[park_id]());\n            });\n            return;\n        }\n        // else park missing, just fall through to standard full test\n    }\n\n    // test all parks supported (and exposed) by the API\n    for (var park in parks) {\n        describe(\"Park \" + parks[park].name, function() {\n            TestPark(new parks[park]());\n        });\n    }\n}\nRun();\n\n/* eslint-enable no-console */"]}