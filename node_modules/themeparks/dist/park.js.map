{"version":3,"sources":["../lib/park.js"],"names":["GeoLocation","require","DebugLog","Promise","moment","random_useragent","Settings","HTTPLib","CacheLib","Ride","Schedule","DefaultTimeFormat","ProxyAgent","s_parkName","Symbol","s_parkTimezone","s_parkGeolocation","s_parkTimeFormat","s_parkDateFormat","s_useragent","s_cacheTimeWaitTimes","s_cacheTimeOpeningTimes","s_rideIDToIDXMap","s_scheduleData","s_scheduleDaysToReturn","s_cacheObject","Park","options","constructor","TypeError","name","DefaultParkName","timezone","DefaultParkTimezone","timeFormat","DefaultParkTimeFormat","dateFormat","DefaultDateFormat","cacheWaitTimesLength","cacheOpeningTimesLength","scheduleDaysToReturn","DefaultScheduleDays","tz","zone","Error","latitude","longitude","UserAgent","useragent","ua","osName","Rides","prefix","callback","arguments","length","GetWaitTimesPromise","then","data","bind","error","ride","Log","id","undefined","className","String","substr","newRide","ride_id","ride_name","push","resolve","reject","SupportsWaitTimes","Name","Cache","Get","ridedata","i","GetRideObject","fromJSON","result","toJSON","err","FetchWaitTimes","Set","ttl","DefaultCacheWaitTimesLength","GetOpeningTimesPromise","SupportsOpeningTimes","openingTimesData","GetDateRange","startDate","endDate","add","ScheduleDays","FetchOpeningTimes","endFillDate","Timezone","m","isBefore","dateData","GetDate","date","SetDate","type","IsDirty","DefaultCacheOpeningTimesLength","format","TimeNow","headers","open_timeout","DefaultOpenTimeout","read_timeout","DefaultReadTimeout","ProxyURL","agent","getRandom","module","exports"],"mappings":"AAAA;;AAEA;;;;;;AACA,IAAIA,cAAcC,QAAQ,kBAAR,CAAlB;AACA;AACA,IAAIC,WAAWD,QAAQ,iBAAR,CAAf;;AAEA;AACA,IAAIE,UAAUF,QAAQ,WAAR,CAAd;;AAEA;AACA,IAAIG,SAASH,QAAQ,iBAAR,CAAb;AACA;AACA,IAAII,mBAAmBJ,QAAQ,kBAAR,CAAvB;;AAEA;AACA,IAAIK,WAAWL,QAAQ,YAAR,CAAf;;AAEA;AACA,IAAIM,UAAUN,QAAQ,QAAR,CAAd;;AAEA;AACA,IAAIO,WAAWP,QAAQ,SAAR,CAAf;;AAEA;AACA,IAAIQ,OAAOR,QAAQ,QAAR,CAAX;AACA;AACA,IAAIS,WAAWT,QAAQ,YAAR,CAAf;;AAEA;AACA,IAAIU,oBAAoB,sBAAxB;;AAEA,IAAIC,aAAaX,QAAQ,mBAAR,CAAjB;;AAEA;AACA,IAAIY,aAAaC,QAAjB;AACA,IAAIC,iBAAiBD,QAArB;AACA,IAAIE,oBAAoBF,QAAxB;AACA,IAAIG,mBAAmBH,QAAvB;AACA,IAAII,mBAAmBJ,QAAvB;AACA,IAAIK,cAAcL,QAAlB;AACA,IAAIM,uBAAuBN,QAA3B;AACA,IAAIO,0BAA0BP,QAA9B;AACA;AACA,IAAIQ,mBAAmBR,QAAvB;AACA;AACA,IAAIS,iBAAiBT,QAArB;AACA;AACA,IAAIU,yBAAyBV,QAA7B;;AAEA;AACA,IAAIW,gBAAgBX,QAApB;;AAEA;;;;;;;IAMMY,I;AACF;;;;;;;;;;;;;AAaA,oBAA0B;AAAA,YAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACtB;AACA;AACA,YAAI,KAAKC,WAAL,KAAqBF,IAAzB,EAA+B;AAC3B,kBAAM,IAAIG,SAAJ,CAAc,uEAAd,CAAN;AACH;;AAED;AACA;AACA;AACA;AACA;AACA,aAAKhB,UAAL,IAAmBc,QAAQG,IAAR,IAAgBxB,SAASyB,eAA5C;AACA,aAAKhB,cAAL,IAAuBY,QAAQK,QAAR,IAAoB1B,SAAS2B,mBAApD;AACA,aAAKhB,gBAAL,IAAyBU,QAAQO,UAAR,IAAsB5B,SAAS6B,qBAAxD;AACA,aAAKjB,gBAAL,IAAyBS,QAAQS,UAAR,IAAsB9B,SAAS+B,iBAAxD;;AAEA;AACA;AACA,aAAKjB,oBAAL,IAA6BO,QAAQW,oBAArC;AACA,aAAKjB,uBAAL,IAAgCM,QAAQY,uBAAxC;;AAEA;AACA,aAAKf,sBAAL,IAA+BG,QAAQa,oBAAR,IAAgClC,SAASmC,mBAAxE;;AAEA;AACA,YAAI,CAACrC,OAAOsC,EAAP,CAAUC,IAAV,CAAe,KAAK5B,cAAL,CAAf,CAAL,EAA2C;AACvC,kBAAM,IAAI6B,KAAJ,uBAA8B,KAAK7B,cAAL,CAA9B,kCAAN;AACH;;AAED;AACA,YAAI,CAAC,KAAKC,iBAAL,CAAD,IAA4B,OAAOW,QAAQkB,QAAf,IAA4B,QAAxD,IAAoE,OAAOlB,QAAQmB,SAAf,IAA6B,QAArG,EAA+G;AAC3G,iBAAK9B,iBAAL,IAA0B,IAAIhB,WAAJ,CAAgB;AACtC8C,2BAAWnB,QAAQmB,SADmB;AAEtCD,0BAAUlB,QAAQkB;AAFoB,aAAhB,CAA1B;AAIH;;AAED;AACA,YAAI,CAAC,KAAK7B,iBAAL,CAAL,EAA8B;AAC1B,kBAAM,IAAI4B,KAAJ,6CAAoD,KAAKd,IAAzD,2DAAN;AACH;;AAED;AACA,aAAKiB,SAAL,GAAiBpB,QAAQqB,SAAR,IAAqB,UAASC,EAAT,EAAa;AAC/C,mBAAQA,GAAGC,MAAH,IAAa,SAArB;AACH,SAFD;;AAIA;AACA,aAAKC,KAAL,GAAa,EAAb;AACA;AACA,aAAK7B,gBAAL,IAAyB,EAAzB;;AAEA;AACA,aAAKC,cAAL,IAAuB,IAAIb,QAAJ,CAAa;AAChCwB,wBAAY,KAAKjB,gBAAL,CADoB;AAEhCmB,wBAAY,KAAKlB,gBAAL;AAFoB,SAAb,CAAvB;;AAKA;AACA,aAAKO,aAAL,IAAsB,IAAIjB,QAAJ,CAAa;AAC/B4C,oBAAQ,KAAKxB,WAAL,CAAiBE;AADM,SAAb,CAAtB;AAGH;;AAED;;;;;;;;;;;uCAOe;AACX,gBAAIuB,WAAWC,UAAUA,UAAUC,MAAV,GAAmB,CAA7B,CAAf;AACA;AACA,gBAAI,OAAOF,QAAP,IAAmB,UAAvB,EAAmC;AAC/B;AACA,qBAAKG,mBAAL,GAA2BC,IAA3B,CAAgC,UAASC,IAAT,EAAe;AAC3CL,6BAAS,IAAT,EAAeK,IAAf;AACH,iBAF+B,CAE9BC,IAF8B,CAEzB,IAFyB,CAAhC,EAEc,UAASC,KAAT,EAAgB;AAC1BP,6BAASO,KAAT;AACH,iBAFa,CAEZD,IAFY,CAEP,IAFO,CAFd;AAKA;AACH,aARD,MAQO;AACH,uBAAO,KAAKH,mBAAL,EAAP;AACH;AACJ;;AAED;;;;;;;;;;wCAOyB;AAAA,gBAAXK,IAAW,uEAAJ,EAAI;;AACrB,gBAAI,CAACA,IAAL,EAAW;AACP,qBAAKC,GAAL,CAAS,wCAAT;AACA,uBAAO,IAAP;AACH;AACD,gBAAID,KAAKE,EAAL,KAAYC,SAAhB,EAA2B;AACvB,qBAAKF,GAAL,CAAS,sCAAT,EAAiDD,IAAjD;AACA,uBAAO,IAAP;AACH;AACD,gBAAIA,KAAK/B,IAAL,KAAckC,SAAlB,EAA6B;AACzB,qBAAKF,GAAL,CAAS,wCAAT,EAAmDD,IAAnD;AACA,uBAAO,IAAP;AACH;;AAED;AACA,gBAAII,YAAY,KAAKrC,WAAL,CAAiBE,IAAjC;AACA,gBAAIoC,OAAOL,KAAKE,EAAZ,EAAgBI,MAAhB,CAAuB,CAAvB,EAA0BF,UAAUV,MAApC,MAAgDU,SAApD,EAA+D;AAC3DJ,qBAAKE,EAAL,GAAaE,SAAb,SAA0BJ,KAAKE,EAA/B;AACH;;AAED;AACA,gBAAI,KAAKzC,gBAAL,EAAuBuC,KAAKE,EAA5B,MAAoCC,SAAxC,EAAmD;;AAE/C;AACA,oBAAII,UAAU,IAAI3D,IAAJ,CAAS;AACnB4D,6BAASR,KAAKE,EADK;AAEnBO,+BAAWT,KAAK/B;AAFG,iBAAT,CAAd;;AAKA;AACA,qBAAKqB,KAAL,CAAWoB,IAAX,CAAgBH,OAAhB;AACA,qBAAK9C,gBAAL,EAAuBuC,KAAKE,EAA5B,IAAkC,KAAKZ,KAAL,CAAWI,MAAX,GAAoB,CAAtD;AACH;;AAED;AACA;AACA,mBAAO,KAAKJ,KAAL,CAAW,KAAK7B,gBAAL,EAAuBuC,KAAKE,EAA5B,CAAX,CAAP;AACH;;AAED;;;;;;;;;yCAM0B;AAAA,gBAAXF,IAAW,uEAAJ,EAAI;;AACtB,gBAAI,CAACA,IAAL,EAAW;AACP,qBAAKC,GAAL,CAAS,yCAAT;AACA,uBAAO,IAAP;AACH;AACD,gBAAID,KAAKE,EAAL,KAAYC,SAAhB,EAA2B;AACvB,qBAAKF,GAAL,CAAS,uCAAT,EAAkDD,IAAlD;AACA,uBAAO,IAAP;AACH;;AAED;AACA,gBAAII,YAAY,KAAKrC,WAAL,CAAiBE,IAAjC;AACA,gBAAIoC,OAAOL,KAAKE,EAAZ,EAAgBI,MAAhB,CAAuB,CAAvB,EAA0BF,UAAUV,MAApC,MAAgDU,SAApD,EAA+D;AAC3DJ,qBAAKE,EAAL,GAAaE,SAAb,SAA0BJ,KAAKE,EAA/B;AACH;;AAED;AACA,gBAAI,KAAKzC,gBAAL,EAAuBuC,KAAKE,EAA5B,MAAoCC,SAAxC,EAAmD;AAC/C,uBAAO,IAAP;AACH;;AAED;AACA,mBAAO,KAAKb,KAAL,CAAW,KAAK7B,gBAAL,EAAuBuC,KAAKE,EAA5B,CAAX,CAAP;AACH;;AAED;;;;;;;8CAIsB;AAClB,mBAAO,IAAI5D,OAAJ,CAAY,UAASqE,OAAT,EAAkBC,MAAlB,EAA0B;AACzC;AACA,oBAAI,CAAC,KAAKC,iBAAV,EAA6B;AACzB,2BAAOD,OAAU,KAAKE,IAAf,0CAAP;AACH;;AAED;AACA,qBAAKC,KAAL,CAAWC,GAAX,CAAe,WAAf,EAA4BpB,IAA5B,CAAiC,UAASqB,QAAT,EAAmB;AAChD;AACA,yBAAK,IAAIC,IAAI,CAAR,EAAWlB,IAAhB,EAAsBA,OAAOiB,SAASC,GAAT,CAA7B,GAA6C;AACzC;AACA,6BAAKC,aAAL,CAAmBnB,IAAnB,EAAyBoB,QAAzB,CAAkCpB,IAAlC;AACH;;AAED;AACA,wBAAIqB,SAAS,EAAb;AACA,yBAAKH,IAAI,CAAT,EAAYlB,OAAO,KAAKV,KAAL,CAAW4B,GAAX,CAAnB,GAAqC;AACjCG,+BAAOX,IAAP,CAAYV,KAAKsB,MAAL,EAAZ;AACH;AACD,2BAAOX,QAAQU,MAAR,CAAP;AACH,iBAbgC,CAa/BvB,IAb+B,CAa1B,IAb0B,CAAjC,EAac,UAASyB,GAAT,EAAc;AACxB,wBAAIA,GAAJ,EAAS;AACL,6BAAKtB,GAAL,wCAA8CsB,GAA9C;AACH;;AAED;AACA,yBAAKC,cAAL,GAAsB5B,IAAtB,CAA2B,YAAW;AAClC;AACA;AACA,4BAAIyB,SAAS,EAAb;AACA,6BAAK,IAAIH,IAAI,CAAR,EAAWlB,IAAhB,EAAsBA,OAAO,KAAKV,KAAL,CAAW4B,GAAX,CAA7B,GAA+C;AAC3CG,mCAAOX,IAAP,CAAYV,KAAKsB,MAAL,EAAZ;AACH;;AAED,6BAAKP,KAAL,CAAWU,GAAX,CAAe,WAAf,EAA4BJ,MAA5B,EAAoC;AAChC;AACAK,iCAAK,KAAKnE,oBAAL,KAA8Bd,SAASkF;AAFZ,yBAApC,EAGG/B,IAHH,CAGQ,YAAW;AACfe,oCAAQU,MAAR;AACH,yBAFO,CAENvB,IAFM,CAED,IAFC,CAHR,EAKcc,MALd;AAMH,qBAd0B,CAczBd,IAdyB,CAcpB,IAdoB,CAA3B,EAcc,UAASyB,GAAT,EAAc;AACxB;AACA,+BAAOX,4CAA0CW,GAA1C,CAAP;AACH,qBAHa,CAGZzB,IAHY,CAGP,IAHO,CAdd;AAkBH,iBAxBa,CAwBZA,IAxBY,CAwBP,IAxBO,CAbd;AAsCH,aA7CkB,CA6CjBA,IA7CiB,CA6CZ,IA7CY,CAAZ,CAAP;AA8CH;;AAED;;;;;;;;;;0CAOkB;AACd,gBAAIN,WAAWC,UAAUA,UAAUC,MAAV,GAAmB,CAA7B,CAAf;AACA;AACA,gBAAI,OAAOF,QAAP,IAAmB,UAAvB,EAAmC;AAC/B;AACA,qBAAKoC,sBAAL,GAA8BhC,IAA9B,CAAmC,UAASC,IAAT,EAAe;AAC9CL,6BAAS,IAAT,EAAeK,IAAf;AACH,iBAFkC,CAEjCC,IAFiC,CAE5B,IAF4B,CAAnC,EAEc,UAASC,KAAT,EAAgB;AAC1BP,6BAASO,KAAT;AACH,iBAFa,CAEZD,IAFY,CAEP,IAFO,CAFd;AAKA;AACH,aARD,MAQO;AACH,uBAAO,KAAK8B,sBAAL,EAAP;AACH;AACJ;;AAED;;;;;;;iDAIyB;AACrB,mBAAO,IAAItF,OAAJ,CAAY,UAASqE,OAAT,EAAkBC,MAAlB,EAA0B;AACzC;AACA,oBAAI,CAAC,KAAKiB,oBAAV,EAAgC;AAC5B,2BAAOjB,OAAU,KAAKE,IAAf,6CAAP;AACH;;AAED;AACA,qBAAKC,KAAL,CAAWC,GAAX,CAAe,cAAf,EAA+BpB,IAA/B,CAAoC,UAASkC,gBAAT,EAA2B;AAC3D;AACA,yBAAKpE,cAAL,EAAqB0D,QAArB,CAA8BU,gBAA9B;;AAEA;AACA,2BAAOnB,QAAQ,KAAKjD,cAAL,EAAqBqE,YAArB,CAAkC;AAC7CC,mCAAWzF,QADkC;AAE7C0F,iCAAS1F,SAAS2F,GAAT,CAAa,KAAKC,YAAlB,EAAgC,MAAhC;AAFoC,qBAAlC,CAAR,CAAP;AAIH,iBATmC,CASlCrC,IATkC,CAS7B,IAT6B,CAApC,EASc,YAAW;AACrB;AACA,yBAAKsC,iBAAL,GAAyBxC,IAAzB,CAA8B,YAAW;AACrC;AACA,4BAAIyC,cAAc9F,SAASsC,EAAT,CAAY,KAAKyD,QAAjB,EAA2BJ,GAA3B,CAA+B,KAAKC,YAAL,GAAoB,EAAnD,EAAuD,MAAvD,CAAlB;AACA,6BAAK,IAAII,IAAIhG,SAASsC,EAAT,CAAY,KAAKyD,QAAjB,CAAb,EAAyCC,EAAEC,QAAF,CAAWH,WAAX,CAAzC,EAAkEE,EAAEL,GAAF,CAAM,CAAN,EAAS,KAAT,CAAlE,EAAmF;AAC/E,gCAAIO,WAAW,KAAK5F,QAAL,CAAc6F,OAAd,CAAsB;AACjCC,sCAAMJ;AAD2B,6BAAtB,CAAf;AAGA,gCAAI,CAACE,QAAL,EAAe;AACX,qCAAK5F,QAAL,CAAc+F,OAAd,CAAsB;AAClBD,0CAAMJ,CADY;AAElBM,0CAAM;AAFY,iCAAtB;AAIH;AACJ;;AAED;AACAlC,gCAAQ,KAAKjD,cAAL,EAAqBqE,YAArB,CAAkC;AACtCC,uCAAWzF,QAD2B;AAEtC0F,qCAAS1F,SAAS2F,GAAT,CAAa,KAAKC,YAAlB,EAAgC,MAAhC;AAF6B,yBAAlC,CAAR;;AAKA;AACA,4BAAI,KAAKzE,cAAL,EAAqBoF,OAAzB,EAAkC;AAC9B;AACA,iCAAK/B,KAAL,CAAWU,GAAX,CAAe,cAAf,EAA+B,KAAK/D,cAAL,EAAqB4D,MAArB,EAA/B,EAA8D;AAC1D;AACAI,qCAAK,KAAKlE,uBAAL,KAAiCf,SAASsG;AAFW,6BAA9D,EAGG,UAASxB,GAAT,EAAc;AACb,oCAAIA,GAAJ,EAAS;AACL;AACA,yCAAKtB,GAAL,mCAAyC,KAAKa,IAA9C;AACH;;AAED;AACA,qCAAKpD,cAAL,EAAqBoF,OAArB,GAA+B,KAA/B;AACH,6BARE,CAQDhD,IARC,CAQI,IARJ,CAHH;AAYH;AACJ,qBArC6B,CAqC5BA,IArC4B,CAqCvB,IArCuB,CAA9B,EAqCc,UAASyB,GAAT,EAAc;AACxB;AACA,+BAAOX,+CAA6CW,GAA7C,CAAP;AACH,qBAHa,CAGZzB,IAHY,CAGP,IAHO,CArCd;AAyCH,iBA3Ca,CA2CZA,IA3CY,CA2CP,IA3CO,CATd;AAqDH,aA5DkB,CA4DjBA,IA5DiB,CA4DZ,IA5DY,CAAZ,CAAP;AA6DH;;AAED;;;;;;;;;AAsDA;;;;;;kCAQQ;AAAA,2FAAJ,EAAI;AAAA,uCADJzB,UACI;AAAA,gBADJA,UACI,mCADS,IACT;;AACJ;AACA;AACA,mBAAO9B,SAASsC,EAAT,CAAY,KAAKyD,QAAjB,EAA2BU,MAA3B,CAAkC3E,cAAc,KAAKjB,gBAAL,CAAd,IAAwCN,iBAA1E,CAAP;AACH;;AAED;;;;;;;;;kCAQQ;AAAA,4FAAJ,EAAI;AAAA,yCADJyB,UACI;AAAA,gBADJA,UACI,oCADS,IACT;;AACJ;AACA,mBAAO,KAAK0E,OAAL,CAAa;AAChB5E,4BAAYE,cAAc,KAAKlB,gBAAL;AADV,aAAb,CAAP;AAGH;;AAED;;;;;;;;;AAyDA;;;6BAGKS,O,EAAS;AACV,gBAAI,CAACA,OAAL,EAAc,OAAOxB,QAAQsE,MAAR,CAAe,yBAAf,CAAP;AACd,gBAAI,CAAC9C,QAAQoF,OAAb,EAAsBpF,QAAQoF,OAAR,GAAkB,EAAlB;AACtB,gBAAI,CAACpF,QAAQoF,OAAR,CAAgB,YAAhB,CAAL,EAAoCpF,QAAQoF,OAAR,CAAgB,YAAhB,IAAgC,KAAKhE,SAArC;;AAEpC,gBAAI,CAACpB,QAAQqF,YAAb,EAA2BrF,QAAQqF,YAAR,GAAuB1G,SAAS2G,kBAAhC;AAC3B,gBAAI,CAACtF,QAAQuF,YAAb,EAA2BvF,QAAQuF,YAAR,GAAuB5G,SAAS6G,kBAAhC;;AAE3B;AACA,gBAAI7G,SAAS8G,QAAb,EAAuB;AACnBzF,wBAAQ0F,KAAR,GAAgB,IAAIzG,UAAJ,CAAeN,SAAS8G,QAAxB,EAAkC,IAAlC,CAAhB;AACH;;AAED;AACA,mBAAO7G,QAAQoB,OAAR,CAAP;AACH;;AAED;;;;;;;;;AAQA;;;;8BAIM;AACF,mBAAOzB,2BAAY,KAAK0B,WAAL,CAAiBE,IAA7B,0CAAyCwB,SAAzC,GAAP;AACH;;;4BA1Kc;AACX,mBAAO,KAAKtC,iBAAL,CAAP;AACH;;AAED;;;;;;;4BAIW;AACP,mBAAO,KAAKH,UAAL,CAAP;AACH;;AAED;;;;;;;;4BAKgB;AACZ,mBAAO,KAAKM,WAAL,CAAP;AACH;;AAED;;;;;;4BAKgC;AAAA,gBAAlB6B,SAAkB,uEAAN,IAAM;;AAC5B,gBAAI,CAACA,SAAL,EAAgB,MAAM,IAAIJ,KAAJ,CAAU,6CAAV,CAAN;;AAEhB,gBAAI,OAAOI,SAAP,IAAqB,UAAzB,EAAqC;AACjC;AACA,qBAAK7B,WAAL,IAAoBd,iBAAiBiH,SAAjB,CAA2BtE,SAA3B,CAApB;AACH,aAHD,MAGO,IAAI,OAAOA,SAAP,IAAqB,QAAzB,EAAmC;AACtC;AACA,qBAAK7B,WAAL,IAAoB6B,SAApB;AACH,aAHM,MAGA;AACH,sBAAM,IAAIJ,KAAJ,CAAU,qEAAV,CAAN;AACH;;AAED,iBAAKkB,GAAL,CAAS,sBAAsB,KAAKf,SAApC;AACH;;AAED;;;;;;;4BAIe;AACX,mBAAO,KAAKhC,cAAL,CAAP;AACH;;;4BAmCc;AACX,mBAAO,KAAKQ,cAAL,CAAP;AACH;;AAED;;;;;;4BAGmB;AACf,mBAAO,KAAKC,sBAAL,CAAP;AACH;;AAED;;;;;;;4BAIe;AACX,mBAAO,KAAP;AACH;;AAED;;;;;;;4BAI0B;AACtB,mBAAO,KAAP;AACH;;AAED;;;;;;;4BAIwB;AACpB;AACA,mBAAO,KAAK6D,cAAL,KAAwBrB,SAA/B;AACH;;AAED;;;;;;;4BAI2B;AACvB;AACA,mBAAO,KAAKiC,iBAAL,KAA2BjC,SAAlC;AACH;;AAED;;;;;;;4BAI4B;AACxB,mBAAO,KAAP;AACH;;;4BA0BW;AACR,mBAAO,KAAKvC,aAAL,CAAP;AACH;;;;;;AAWL;;;AACA8F,OAAOC,OAAP,GAAiB9F,IAAjB","file":"park.js","sourcesContent":["\"use strict\";\n\n// our simple geolocation object library\nvar GeoLocation = require(\"./geoLocation.js\");\n// a basic debug log wrapper\nvar DebugLog = require(\"./debugPrint.js\");\n\n// include our Promise library\nvar Promise = require(\"./promise\");\n\n// MomentJS time library\nvar moment = require(\"moment-timezone\");\n// random useragent generator\nvar random_useragent = require(\"random-useragent\");\n\n// load user settings\nvar Settings = require(\"./settings\");\n\n// wrap the HTTP lib for each park so we automatically pass the User-Agent header nicely along\nvar HTTPLib = require(\"./http\");\n\n// our caching library, each park will get it's own cache object\nvar CacheLib = require(\"./cache\");\n\n// our Ride object\nvar Ride = require(\"./ride\");\n// our Schedule class\nvar Schedule = require(\"./schedule\");\n\n// default time format for returning times\nvar DefaultTimeFormat = \"YYYY-MM-DDTHH:mm:ssZ\";\n\nvar ProxyAgent = require(\"socks-proxy-agent\");\n\n// park symbols\nvar s_parkName = Symbol();\nvar s_parkTimezone = Symbol();\nvar s_parkGeolocation = Symbol();\nvar s_parkTimeFormat = Symbol();\nvar s_parkDateFormat = Symbol();\nvar s_useragent = Symbol();\nvar s_cacheTimeWaitTimes = Symbol();\nvar s_cacheTimeOpeningTimes = Symbol();\n// track which Ride ID is at which index in our Rides array\nvar s_rideIDToIDXMap = Symbol();\n// key for our schedule data\nvar s_scheduleData = Symbol();\n// how many days to return for opening time schedules\nvar s_scheduleDaysToReturn = Symbol();\n\n// our cache object\nvar s_cacheObject = Symbol();\n\n/**\n * Park class handles all the base logic for all implemented themeparks.\n * All parks should inherit from this base class.\n * Any common functionality is implemented here to save endless re-implementations for each park.\n * @class\n */\nclass Park {\n    /**\n     * Create a new Park object\n     * @param {Object} options\n     * @param {String} options.name The name of this park\n     * @param {String} options.timezone Park's timezone\n     * @param {String} [options.timeFormat] Format to display park times in\n     * @param {String} [options.dateFormat] Format to display park dates in\n     * @param {Number} [options.cacheWaitTimesLength=300] How long (in seconds) to cache wait times before fetching fresh time\n     * @param {Number} options.latitude Park's latitude\n     * @param {Number} options.longitude Park's longitude\n     * @param {String} [options.useragent] Useragent to use when making HTTP requests\n     * @param {Number} [options.scheduleDaysToReturn] Days of opening times to return with GetOpeningTimes()\n     */\n    constructor(options = {}) {\n        // can only construct actual parks, not the park object itself\n        //  see http://ilikekillnerds.com/2015/06/abstract-classes-in-javascript/\n        if (this.constructor === Park) {\n            throw new TypeError(\"Cannot create Park object directly, only park implementations of Park\");\n        }\n\n        // take base variables from the constructor\n        //  these variables should be present for all parks\n        // what's up with these OR things?\n        //  by default, use any manually passed in options\n        //  finally, fallback on the default settings\n        this[s_parkName] = options.name || Settings.DefaultParkName;\n        this[s_parkTimezone] = options.timezone || Settings.DefaultParkTimezone;\n        this[s_parkTimeFormat] = options.timeFormat || Settings.DefaultParkTimeFormat;\n        this[s_parkDateFormat] = options.dateFormat || Settings.DefaultDateFormat;\n\n        // cache settings\n        //  how long wait times are cached before fetching new data\n        this[s_cacheTimeWaitTimes] = options.cacheWaitTimesLength;\n        this[s_cacheTimeOpeningTimes] = options.cacheOpeningTimesLength;\n\n        // how many schedule days to return?\n        this[s_scheduleDaysToReturn] = options.scheduleDaysToReturn || Settings.DefaultScheduleDays;\n\n        // validate park's timezone with momentjs\n        if (!moment.tz.zone(this[s_parkTimezone])) {\n            throw new Error(`Invalid timezone ${this[s_parkTimezone]} passed to park constructor.`);\n        }\n\n        // create a geolocation object if we've been passed a longitude and latitude\n        if (!this[s_parkGeolocation] && typeof(options.latitude) == \"number\" && typeof(options.longitude) == \"number\") {\n            this[s_parkGeolocation] = new GeoLocation({\n                longitude: options.longitude,\n                latitude: options.latitude\n            });\n        }\n\n        // validate our geolocation object has been created\n        if (!this[s_parkGeolocation]) {\n            throw new Error(`No park GeoLocation object created for ${this.name}. Please supply longitude and latitude for this park.`);\n        }\n\n        // set useragent, or if no useragent has been set, create a random Android one by default\n        this.UserAgent = options.useragent || function(ua) {\n            return (ua.osName == \"Android\");\n        };\n\n        // initialise the Rides array\n        this.Rides = [];\n        // also initialise our ride ID -> idx map\n        this[s_rideIDToIDXMap] = {};\n\n        // make a new schedule object for storing park opening hours in\n        this[s_scheduleData] = new Schedule({\n            timeFormat: this[s_parkTimeFormat],\n            dateFormat: this[s_parkDateFormat],\n        });\n\n        // create cache object for this park\n        this[s_cacheObject] = new CacheLib({\n            prefix: this.constructor.name\n        });\n    }\n\n    /**\n     * Get waiting times for rides from this park\n     * If the last argument is a function, this will act as a callback.\n     *  Callback will call with callback(error, data)\n     *  Data will be null if error is present\n     * If the last argument is not a function, this will return a Promise.\n     */\n    GetWaitTimes() {\n        var callback = arguments[arguments.length - 1];\n        // if our last argument is a function, use it as a callback\n        if (typeof callback == \"function\") {\n            // translate the promise result into a \"classic\" callback response\n            this.GetWaitTimesPromise().then(function(data) {\n                callback(null, data);\n            }.bind(this), function(error) {\n                callback(error);\n            }.bind(this));\n            // otherwise, return a Promise object\n        } else {\n            return this.GetWaitTimesPromise();\n        }\n    }\n\n    /**\n     * Fetch the ride data for the requested ID. If it doesn't exist, add a new ride to our park's ride set\n     * @param {Object} ride - Ride data to apply\n     * @param {String} ride.id - Ride's ID\n     * @param {String} ride.name - Ride's name\n     * @returns {Ride} ride - Newly created (or the existing) Ride object\n     */\n    GetRideObject(ride = {}) {\n        if (!ride) {\n            this.Log(\"No Ride Data supplied to GetRideObject\");\n            return null;\n        }\n        if (ride.id === undefined) {\n            this.Log(\"No Ride ID supplied to GetRideObject\", ride);\n            return null;\n        }\n        if (ride.name === undefined) {\n            this.Log(\"No Ride name supplied to GetRideObject\", ride);\n            return null;\n        }\n\n        // prepend the park's class name to the ID to attempt to ensure uniqueness\n        var className = this.constructor.name;\n        if (String(ride.id).substr(0, className.length) !== className) {\n            ride.id = `${className}_${ride.id}`;\n        }\n\n        // check if we don't already have this ride in our data set\n        if (this[s_rideIDToIDXMap][ride.id] === undefined) {\n\n            // new ride! add to our set\n            var newRide = new Ride({\n                ride_id: ride.id,\n                ride_name: ride.name,\n            });\n\n            // add our new ride to our ride list and make an ID mapping\n            this.Rides.push(newRide);\n            this[s_rideIDToIDXMap][ride.id] = this.Rides.length - 1;\n        }\n\n        // else, don't worry about it, fail quietly\n        // return the already existing ride\n        return this.Rides[this[s_rideIDToIDXMap][ride.id]];\n    }\n\n    /**\n     * Fetch the ride data for the requested ID. If it doesn't exist, returns null\n     * @param {Object} ride - Ride data to search for\n     * @param {String} ride.id - Ride's ID\n     * @returns {Ride} ride - Existing Ride object (or null if it doesn't exist)\n     */\n    FindRideObject(ride = {}) {\n        if (!ride) {\n            this.Log(\"No Ride Data supplied to FindRideObject\");\n            return null;\n        }\n        if (ride.id === undefined) {\n            this.Log(\"No Ride ID supplied to FindRideObject\", ride);\n            return null;\n        }\n\n        // prepend the park's class name to the ID to attempt to ensure uniqueness\n        var className = this.constructor.name;\n        if (String(ride.id).substr(0, className.length) !== className) {\n            ride.id = `${className}_${ride.id}`;\n        }\n\n        // check if we have this ride yet\n        if (this[s_rideIDToIDXMap][ride.id] === undefined) {\n            return null;\n        }\n\n        // return the already existing ride\n        return this.Rides[this[s_rideIDToIDXMap][ride.id]];\n    }\n\n    /** \n     * Get waiting times for rides from this park\n     * @returns {Promise}\n     */\n    GetWaitTimesPromise() {\n        return new Promise(function(resolve, reject) {\n            // do we actually support wait times?\n            if (!this.SupportsWaitTimes) {\n                return reject(`${this.Name} doesn't support fetching wait times`);\n            }\n\n            // check our cache first\n            this.Cache.Get(\"waittimes\").then(function(ridedata) {\n                // we have ridedata from the cache! apply over our current ride data\n                for (var i = 0, ride; ride = ridedata[i++];) {\n                    // restore ride state from cache\n                    this.GetRideObject(ride).fromJSON(ride);\n                }\n\n                // make an array of all the ride states\n                var result = [];\n                for (i = 0; ride = this.Rides[i++];) {\n                    result.push(ride.toJSON());\n                }\n                return resolve(result);\n            }.bind(this), function(err) {\n                if (err) {\n                    this.Log(`Error fetching cached wait times: ${err}`);\n                }\n\n                // cache missing key or the cached data has expired. Fetch new data!\n                this.FetchWaitTimes().then(function() {\n                    // success! the this.Rides array should now be populated\n                    //  cache the Rides array and return result\n                    var result = [];\n                    for (var i = 0, ride; ride = this.Rides[i++];) {\n                        result.push(ride.toJSON());\n                    }\n\n                    this.Cache.Set(\"waittimes\", result, {\n                        // either use the options.cacheWaitTimesLength or the default cache time length\n                        ttl: this[s_cacheTimeWaitTimes] || Settings.DefaultCacheWaitTimesLength\n                    }).then(function() {\n                        resolve(result);\n                    }.bind(this), reject);\n                }.bind(this), function(err) {\n                    // failed to fetch wait times, reject Promise\n                    return reject(`Error fetching park wait times: ${err}`);\n                }.bind(this));\n            }.bind(this));\n        }.bind(this));\n    }\n\n    /**\n     * Get opening times for this park\n     * If the last argument is a function, this will act as a callback.\n     *  Callback will call with callback(error, data)\n     *  Data will be null if error is present\n     * If the last argument is not a function, this will return a Promise.\n     */\n    GetOpeningTimes() {\n        var callback = arguments[arguments.length - 1];\n        // if our last argument is a function, use it as a callback\n        if (typeof callback == \"function\") {\n            // translate the promise result into a \"classic\" callback response\n            this.GetOpeningTimesPromise().then(function(data) {\n                callback(null, data);\n            }.bind(this), function(error) {\n                callback(error);\n            }.bind(this));\n            // otherwise, return a Promise object\n        } else {\n            return this.GetOpeningTimesPromise();\n        }\n    }\n\n    /** \n     * Get opening times for this park\n     * @returns {Promise}\n     */\n    GetOpeningTimesPromise() {\n        return new Promise(function(resolve, reject) {\n            // do we actually support opening times?\n            if (!this.SupportsOpeningTimes) {\n                return reject(`${this.Name} doesn't support fetching opening times`);\n            }\n\n            // check our cache first\n            this.Cache.Get(\"openingtimes\").then(function(openingTimesData) {\n                // restore schedule from cached data\n                this[s_scheduleData].fromJSON(openingTimesData);\n\n                // fetch date range to return\n                return resolve(this[s_scheduleData].GetDateRange({\n                    startDate: moment(),\n                    endDate: moment().add(this.ScheduleDays, \"days\"),\n                }));\n            }.bind(this), function() {\n                // cache missing key or the cached data has expired. Fetch new data!\n                this.FetchOpeningTimes().then(function() {\n                    // fill in any missing days in the next period as closed\n                    var endFillDate = moment().tz(this.Timezone).add(this.ScheduleDays + 90, \"days\");\n                    for (var m = moment().tz(this.Timezone); m.isBefore(endFillDate); m.add(1, \"day\")) {\n                        var dateData = this.Schedule.GetDate({\n                            date: m\n                        });\n                        if (!dateData) {\n                            this.Schedule.SetDate({\n                                date: m,\n                                type: \"Closed\"\n                            });\n                        }\n                    }\n\n                    // resolve with our new schedule data\n                    resolve(this[s_scheduleData].GetDateRange({\n                        startDate: moment(),\n                        endDate: moment().add(this.ScheduleDays, \"days\"),\n                    }));\n\n                    // if the data is now dirty, cache it\n                    if (this[s_scheduleData].IsDirty) {\n                        // save schedule data in cache\n                        this.Cache.Set(\"openingtimes\", this[s_scheduleData].toJSON(), {\n                            // either use the options.s_cacheTimeOpeningTimes or the default cache time length\n                            ttl: this[s_cacheTimeOpeningTimes] || Settings.DefaultCacheOpeningTimesLength\n                        }, function(err) {\n                            if (err) {\n                                // if we error, console out, but don't fail (still return data)\n                                this.Log(`Error setting cache data for ${this.Name}`);\n                            }\n\n                            // mark data as no longer dirty (no longer needs caching)\n                            this[s_scheduleData].IsDirty = false;\n                        }.bind(this));\n                    }\n                }.bind(this), function(err) {\n                    // failed to fetch opening times, reject Promise\n                    return reject(`Error fetching park opening times: ${err}`);\n                }.bind(this));\n            }.bind(this));\n        }.bind(this));\n    }\n\n    /**\n     * Get this park's geolocation object\n     * @type {GeoLocation}\n     * */\n    get Location() {\n        return this[s_parkGeolocation];\n    }\n\n    /**\n     * Get this park's name in a human-readable form\n     * @type {String}\n     * */\n    get Name() {\n        return this[s_parkName];\n    }\n\n    /**\n     * Get this park's useragent string for making network requests\n     * This is usually randomly generated on object construction\n     * @type {String}\n     */\n    get UserAgent() {\n        return this[s_useragent];\n    }\n\n    /**\n     * Set this park's useragent\n     * Can set user agent to a defined string or use a generator function (see random-useragent library)\n     * @type {string|function}\n     */\n    set UserAgent(useragent = null) {\n        if (!useragent) throw new Error(\"No configuration passed to UserAgent setter\");\n\n        if (typeof(useragent) == \"function\") {\n            // generate a useragent using a generator function\n            this[s_useragent] = random_useragent.getRandom(useragent);\n        } else if (typeof(useragent) == \"string\") {\n            // set useragent using supplied static string\n            this[s_useragent] = useragent;\n        } else {\n            throw new Error(\"Must define either static user agent string or a generator function\");\n        }\n\n        this.Log(\"Set useragent to \" + this.UserAgent);\n    }\n\n    /**\n     * Get this park's Timezone\n     * @type {String}\n     * */\n    get Timezone() {\n        return this[s_parkTimezone];\n    }\n\n    /**\n     * Get park's current time\n     * @param {Object} timeFormatObject\n     * @param {String} [timeFormatObject.timeFormat] Moment JS format string to format time as \n     * @returns {String} Time as formatted by park's timeformat, or the default timeformat if set to null\n     * */\n    TimeNow({\n        timeFormat = null\n    } = {}) {\n        // take time right now, convert now into park's timezone and format it\n        //  format in preferred order of, manually passed in format, park's default time format, or global default time format\n        return moment().tz(this.Timezone).format(timeFormat || this[s_parkTimeFormat] || DefaultTimeFormat);\n    }\n\n    /**\n     * Get park's current date\n     * @param {Object} dateFormatObject\n     * @param {String} [dateFormatObject.dateFormat] Moment JS format string to format date as \n     * @returns {String} Date as formatted by park's dateFormat, or the default dateFormat if set to null\n     * */\n    DateNow({\n        dateFormat = null\n    } = {}) {\n        // we're just calling the TimeNow function with a date formate string instead\n        return this.TimeNow({\n            timeFormat: dateFormat || this[s_parkDateFormat]\n        });\n    }\n\n    /**\n     * Get the park's raw schedule object\n     * @returns {Schedule} Schedule object for this park's opening times\n     */\n    get Schedule() {\n        return this[s_scheduleData];\n    }\n\n    /**\n     * Get how many days the fetched schedule is expected to be\n     */\n    get ScheduleDays() {\n        return this[s_scheduleDaysToReturn];\n    }\n\n    /**\n     * Does this park offer fast-pass services?\n     * @type {Boolean}\n     */\n    get FastPass() {\n        return false;\n    }\n\n    /**\n     * Does this park tell you the fast-pass return times?\n     * @type {Boolean}\n     */\n    get FastPassReturnTimes() {\n        return false;\n    }\n\n    /**\n     * Does this park offer wait time information?\n     * @type {Boolean}\n     */\n    get SupportsWaitTimes() {\n        // base this logic solely on the presence of a function \"FetchWaitTimes\" existing\n        return this.FetchWaitTimes !== undefined;\n    }\n\n    /**\n     * Does this park offer opening time information?\n     * @type {Boolean}\n     */\n    get SupportsOpeningTimes() {\n        // base this logic solely on the presence of a function \"FetchOpeningTimes\" existing\n        return this.FetchOpeningTimes !== undefined;\n    }\n\n    /**\n     * Does this park offer opening times for rides?\n     * @type {Boolean}\n     */\n    get SupportsRideSchedules() {\n        return false;\n    }\n\n    /**\n     * Make an HTTP request using this park's user agent\n     */\n    HTTP(options) {\n        if (!options) return Promise.reject(\"No HTTP options passed!\");\n        if (!options.headers) options.headers = {};\n        if (!options.headers[\"User-Agent\"]) options.headers[\"User-Agent\"] = this.UserAgent;\n\n        if (!options.open_timeout) options.open_timeout = Settings.DefaultOpenTimeout;\n        if (!options.read_timeout) options.read_timeout = Settings.DefaultReadTimeout;\n\n        // Use proxy agent if defined in settings\n        if (Settings.ProxyURL) {\n            options.agent = new ProxyAgent(Settings.ProxyURL, true);\n        }\n\n        // pass on options to HTTP lib\n        return HTTPLib(options);\n    }\n\n    /**\n     * Get the cache object for this park\n     * @returns {Cache}\n     */\n    get Cache() {\n        return this[s_cacheObject];\n    }\n\n    /**\n     * Debug print a message (when NODE_DEBUG=themeparks is set in environment)\n     * @param {...*} ToPrint Objects/strings to print\n     * */\n    Log() {\n        return DebugLog(`${this.constructor.name}:`, ...arguments);\n    }\n}\n\n// export the Park class\nmodule.exports = Park;"]}