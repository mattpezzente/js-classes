{"version":3,"sources":["../lib/test.js"],"names":["assert","require","Park","themeparks","Cache","crypto","tzlookup","console","log","describe","parkBase","it","done","err","timeout","cacher","prefix","cacheKey","Date","toUTCString","Get","then","randomString","GenerateRandomString","Set","ttl","data","ttlTime","setTimeout","wrapCallbackCalled","Wrap","Promise","resolve","bind","Array","isArray","AllParks","Parks","constructor","i","hasOwnProperty","park","name","undefined","parkName","foundPark","locationTimezone","Location","LatitudeRaw","LongitudeRaw","equal","Timezone","positions","positionString","toString","push","length","error","process","exit","randomBytes"],"mappings":"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","file":"test.js","sourcesContent":["var assert = require(\"assert\");\nvar Park = require(\"./park.js\");\nvar themeparks = require(\"./index\");\nvar Cache = require(\"./cache\");\nvar crypto = require(\"crypto\");\nvar tzlookup = require(\"tz-lookup\");\n\n// define Mocha functions for eslint\n/*global describe it*/\n\n// allow console for unit tests\n/* eslint-disable no-console */\n\ntry {\n    console.log(\"Starting themeparks tests...\");\n\n    // test base park implementation doesn't implement anything invalid\n    describe(\"Test base park implementation\", function() {\n        var parkBase;\n        it(\"should not create the park base successfully\", function(done) {\n            try {\n                parkBase = new Park();\n                assert(!parkBase, \"parkBase should not successfully construct\");\n            } catch (err) {\n                done();\n            }\n        });\n    });\n\n    // some caching tests\n    describe(\"Test caching module\", function() {\n        // extend the timeout of these tests to handle ttl test case\n        this.timeout(1000 * 5);\n\n        var cacher = new Cache({\n            prefix: \"test\"\n        });\n        // create a unique key for testing against\n        var cacheKey = (new Date()).toUTCString();\n\n        it(\"should fail for cache items not yet set\", function(done) {\n            cacher.Get(cacheKey + \"_invalid\").then(function() {\n                done(\"Cache should not return data for a not set key\");\n            }, done);\n        });\n\n        it(\"should return identical data on get after cache data has been set\", function(done) {\n            var randomString = GenerateRandomString();\n            cacher.Set(cacheKey, randomString, {\n                ttl: 10\n            }).then(function() {\n                // now test we can get the data back\n                cacher.Get(cacheKey).then(function(data) {\n                    if (data != randomString) return done(\"Returned data doesn't match set random string\");\n                    done();\n                }, function() {\n                    done(\"Failed to get cache string response back\");\n                });\n            }, function() {\n                done(\"Failed to set cache string\");\n            });\n        });\n\n        it(\"should expire items after request ttl\", function(done) {\n            var randomString = GenerateRandomString();\n            var ttlTime = 1;\n\n            cacher.Set(cacheKey + \"timed\", randomString, {\n                ttl: ttlTime\n            }).then(function() {\n                cacher.Get(cacheKey + \"timed\").then(function(data) {\n                    assert(data == randomString, \"Returned data doesn't match set random string (timed test)\");\n                    setTimeout(function() {\n                        cacher.Get(cacheKey + \"timed\").then(function() {\n                            done(\"Should not return valid data after the ttl has expired\");\n                        }, done);\n                    }, (ttlTime + 0.5) * 1000);\n                }, function() {\n                    done(\"Failed to get cached data immediately (timed test)\");\n                });\n            }, function() {\n                done(\"Failed to set cache string (timed test)\");\n            });\n        });\n\n        // cache wrap tests\n        it(\"should cache wrap correctly with non-existant key\", function(done) {\n            var wrapCallbackCalled = false;\n            var randomString = GenerateRandomString();\n\n            cacher.Wrap(cacheKey + \"wrap\", function() {\n                // mark callback as called\n                wrapCallbackCalled = true;\n\n                return new Promise(function(resolve) {\n                    resolve(randomString);\n                });\n            }, 10).then(function(data) {\n                if (!wrapCallbackCalled) return done(\"Wrap data setter function failed to be called for missing key\");\n                if (data != randomString) return done(\"Wrapped data returned doesn't match generated random string\");\n                done();\n            }, function() {\n                done(\"Failed to call wrap function\");\n            });\n        });\n\n        it(\"should cache wrap correctly with already set key\", function(done) {\n            var randomString = GenerateRandomString();\n\n            cacher.Set(cacheKey + \"wrapsetkey\", randomString).then(function() {\n                // test key set, now test wrapping against it\n                cacher.Wrap(cacheKey + \"wrapsetkey\", function() {\n                    // this callback should never be called, because the key exists\n                    done(\"Callback to set key in Wrap called, but key already exists\");\n                }, 10).then(function(data) {\n                    if (data != randomString) return done(\"Wrapped data returned doesn't match generated random string\");\n                    done();\n                }, function() {\n                    done(\"Failed to call wrap function after manually setting key\");\n                });\n\n            }.bind(this), function() {\n                done(\"Failed to set wrap set key test\");\n            }.bind(this));\n        });\n    });\n\n    // test exposed parks are done correctly\n    describe(\"Test exposed parks are setup correctly\", function() {\n        it(\"should have an array of parks as .AllParks\", function() {\n            assert(Array.isArray(themeparks.AllParks), \".AllParks should be an array of all the parks available\");\n        });\n\n        it(\"should have an object of parks as .Parks\", function() {\n            assert(themeparks.Parks.constructor === {}.constructor, \".Parks should be an object of available parks\");\n\n            for (var i in themeparks.Parks) {\n                if (!themeparks.Parks.hasOwnProperty(i)) {\n                    continue;\n                }\n\n                var park = new themeparks.Parks[i]();\n                assert(!!park, \"Park \" + i + \" failed to initialize.\");\n            }\n        });\n\n        for (var i = 0, park; park = themeparks.AllParks[i++];) {\n            (function(park) {\n                it(`park .AllParks[${i}]{${park.name}} should have a corresponding .Parks entry`, function() {\n                    assert(themeparks.Parks[park.name] !== undefined, `park ${park.name} should have an entry called ${park.name} in .Parks`);\n                });\n            }(park));\n        }\n\n        for (var parkName in themeparks.Parks) {\n            (function(parkName) {\n                it(`park .Parks[${parkName}] should have a corresponding .AllParks entry`, function() {\n                    var foundPark = false;\n                    for (var i = 0, park; park = themeparks.AllParks[i++];) {\n                        if (park.name == parkName) {\n                            foundPark = true;\n                            break;\n                        }\n                    }\n\n                    assert(foundPark, `.AllParks should have a reference to ${parkName}`);\n                });\n            }(parkName));\n        }\n    });\n\n    describe(\"Test parks have correct timezone setup\", function() {\n        for (var parkName in themeparks.Parks) {\n            (function(parkName) {\n                it(`park .Parks[${parkName}] should use the correct timezone`, function() {\n                    var park = new themeparks.Parks[parkName]();\n                    var locationTimezone = tzlookup(park.Location.LatitudeRaw, park.Location.LongitudeRaw);\n\n                    // Montreal was removed from timezone database in 2013\n                    //  so manually change this to Toronto (I want to remain compatible with any systems with modern tzdata files)\n                    //  see https://en.wikipedia.org/wiki/America/Montreal#Relation_to_America.2FToronto\n                    if (locationTimezone == \"America/Montreal\") {\n                        locationTimezone = \"America/Toronto\";\n                    }\n\n                    assert.equal(locationTimezone, park.Timezone, `${parkName} should have ${locationTimezone} set as Timezone`);\n                });\n            }(parkName));\n        }\n    });\n\n    describe(\"Check parks have unique geo-positions\", function() {\n        // create a list of park locations first\n        var positions = {};\n        for (var parkName in themeparks.Parks) {\n            var park = new themeparks.Parks[parkName]();\n            var positionString = park.Location.toString();\n            if (!positions[positionString]) positions[positionString] = [];\n            positions[positionString].push(parkName);\n        }\n\n        for (parkName in themeparks.Parks) {\n            (function(parkName) {\n                it(`park .Parks[${parkName}] should have a unique geo location`, function() {\n                    var park = new themeparks.Parks[parkName]();\n\n                    var positionString = park.Location.toString();\n\n                    assert.equal(positions[positionString].length, 1, `${parkName}'s position (${positionString}) should be unique`);\n                });\n            }(parkName));\n        }\n    });\n\n} catch (err) {\n    console.error(\"Unit tests failed\");\n    console.error(err);\n    process.exit(1);\n}\n\nfunction GenerateRandomString() {\n    return crypto.randomBytes(20).toString(\"hex\");\n}\n\n/* eslint-enable no-console */"]}