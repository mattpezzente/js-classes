{"version":3,"sources":["../../lib/merlinparks/chessingtonworldofadventures.js"],"names":["MerlinPark","require","crypto","Moment","cheerio","rideNames","ParseArea","obj","areas","i","AddRideName","items","j","isRide","categories","category","id","name","__dirname","ChessingtonWorldOfAdventures","options","timezone","latitude","longitude","api_base","api_key","resort_id","challenge","createHash","update","APIKey","digest","ridedata","FetchOpeningTimesHTML","then","HTML","ParseOpeningTimesHTML","HTTP","url","$","load","each","idx","el","hasClass","hours","dayinfo","find","text","opens","attr","closes","toLowerCase","indexOf","Schedule","SetDate","openingTime","closingTime","type","Promise","resolve","module","exports"],"mappings":"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","file":"chessingtonworldofadventures.js","sourcesContent":["\"use strict\";\n\nvar MerlinPark = require(\"./legacy\");\nvar crypto = require(\"crypto\");\nvar Moment = require(\"moment-timezone\");\n\n// web-scraping library for opening dates\nvar cheerio = require(\"cheerio\");\n\n// grab JSON park data\nvar rideNames = {};\n\n// parse ride names from manually extracted JSON file\nfunction ParseArea(obj) {\n    if (!obj) return;\n\n    if (obj.areas) {\n        for (var i in obj.areas) {\n            AddRideName(obj.areas[i]);\n            ParseArea(obj.areas[i]);\n        }\n    }\n\n    if (obj.items) {\n        for (var j in obj.items) {\n            AddRideName(obj.items[j]);\n            ParseArea(obj.items[j]);\n        }\n    }\n\n}\n\nfunction AddRideName(obj) {\n    // check this is a ride before storing it's name\n    var isRide = false;\n    if (obj.categories) {\n        for (var i = 0, category; category = obj.categories[i++];) {\n            // rides and attractions have category ID 465\n            if (category == 465) {\n                isRide = true;\n                break;\n            }\n        }\n    }\n\n    if (isRide) {\n        rideNames[obj.id] = obj.name;\n    }\n}\n\nParseArea(require(__dirname + \"/chessingtonworldofadventures_data.js\").areas);\n\n// edge-case: this ride is actually missing from the app, add it manually\nif (!rideNames[3958]) {\n    rideNames[3958] = \"Penguins of Madagascar Mission: Treetop Hoppers\";\n}\n\n/**\n * Chessington World Of Adventures\n * @class\n * @extends MerlinPark\n */\nclass ChessingtonWorldOfAdventures extends MerlinPark {\n    /**\n     * Create a new ChessingtonWorldOfAdventures object\n     */\n    constructor(options = {}) {\n        options.name = options.name || \"Chessington World Of Adventures\";\n        options.timezone = options.timezone || \"Europe/London\";\n\n        // set park's location as it's entrance\n        options.latitude = options.latitude || 51.3496;\n        options.longitude = options.longitude || -0.31457;\n\n        // Park API options\n        options.api_base = \"https://legacy-api.attractions.io/apps/command/chessington\";\n        options.api_key = \"edqXyMWFtuqGY6BZ9Epkzg4ptqe6v3c7tdqa97VbXjvrgZHC\";\n\n        options.resort_id = 44;\n\n        // inherit from base class\n        super(options);\n\n    }\n\n    /**\n     * Response to challenge request for Chessington World Of Adventures API\n     */\n    _APIRespond(challenge) {\n        // this is actually identical to Alton Towers, but the challenge and API Key are swapped around\n        return crypto.createHash(\"md5\").update(challenge + this.APIKey).digest(\"hex\");\n    }\n\n    /**\n     * Given a ride object, return the ride's name\n     */\n    _GetRideName(ridedata) {\n        return rideNames[ridedata.id];\n    }\n\n    FetchOpeningTimes() {\n        return this.FetchOpeningTimesHTML().then((HTML) => {\n            return this.ParseOpeningTimesHTML(HTML);\n        });\n    }\n\n    FetchOpeningTimesHTML() {\n        return this.HTTP({\n            url: \"https://www.chessington.com/plan/chessington-opening-times.aspx\"\n        });\n    }\n\n    ParseOpeningTimesHTML(HTML) {\n        var $ = cheerio.load(HTML);\n\n        $(\".day\").each((idx, el) => {\n            el = $(el);\n            // skip days in the pass\n            if (el.hasClass(\"inactive\")) return;\n\n            var hours = {\n                dayinfo: el.find(\".dayInfo > span\").text(),\n                opens: el.find(\"meta[itemprop=opens]\").attr(\"content\"),\n                closes: el.find(\"meta[itemprop=closes]\").attr(\"content\"),\n            };\n\n            // check if the park is open this day (and not just the zoo or such)\n            var dayinfo = hours.dayinfo ? hours.dayinfo.toLowerCase() : \"\";\n            // normal opening day\n            if (dayinfo.indexOf(\"theme park\") >= 0) {\n                this.Schedule.SetDate({\n                    openingTime: Moment(hours.opens),\n                    closingTime: Moment(hours.closes),\n                    type: \"Operating\"\n                });\n            }\n        });\n\n        return Promise.resolve();\n    }\n}\n\nmodule.exports = ChessingtonWorldOfAdventures;"]}